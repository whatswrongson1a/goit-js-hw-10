{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport iziToast from \"izitoast\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst timerFields = document.querySelectorAll('.field .value');\n\nlet userSelectedDate = null;\nlet timerInterval = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate < new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nstartButton.addEventListener('click', () => {\n  if (!userSelectedDate || userSelectedDate < new Date()) return;\n\n  startButton.disabled = true;\n  datetimePicker.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const timeRemaining = userSelectedDate - new Date();\n    if (timeRemaining <= 0) {\n      clearInterval(timerInterval);\n      timerFields.forEach(field => field.textContent = '00');\n      return;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(timeRemaining);\n    timerFields[0].textContent = addLeadingZero(days);\n    timerFields[1].textContent = addLeadingZero(hours);\n    timerFields[2].textContent = addLeadingZero(minutes);\n    timerFields[3].textContent = addLeadingZero(seconds);\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}"],"names":["datetimePicker","startButton","timerFields","userSelectedDate","timerInterval","options","selectedDates","iziToast","flatpickr","timeRemaining","field","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"+IAKA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAc,SAAS,iBAAiB,eAAe,EAE7D,IAAIC,EAAmB,KACnBC,EAAgB,KAEpB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAC9BH,EAAmB,IAAI,MACzBI,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDN,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEAO,EAAUR,EAAgBK,CAAO,EAEjCJ,EAAY,iBAAiB,QAAS,IAAM,CACtC,CAACE,GAAoBA,EAAmB,IAAI,OAEhDF,EAAY,SAAW,GACvBD,EAAe,SAAW,GAE1BI,EAAgB,YAAY,IAAM,CAChC,MAAMK,EAAgBN,EAAmB,IAAI,KAC7C,GAAIM,GAAiB,EAAG,CACtB,cAAcL,CAAa,EAC3BF,EAAY,QAAQQ,GAASA,EAAM,YAAc,IAAI,EACrD,MACD,CAED,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAa,EACjEP,EAAY,CAAC,EAAE,YAAcc,EAAeL,CAAI,EAChDT,EAAY,CAAC,EAAE,YAAcc,EAAeJ,CAAK,EACjDV,EAAY,CAAC,EAAE,YAAcc,EAAeH,CAAO,EACnDX,EAAY,CAAC,EAAE,YAAcc,EAAeF,CAAO,CACpD,EAAE,GAAI,EACT,CAAC,EAED,SAASC,EAAUE,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}